name: Testes de Desempenho Contínuos

on:
  push:
    branches: [ master ] # Ou 'main', dependendo do nome da sua branch
  workflow_dispatch:

jobs:
  run-performance-tests:
    runs-on: ubuntu-latest

    steps:
      - name: 1. Baixar o código do repositório
        uses: actions/checkout@v3

      - name: 2. Configurar Java e Maven
        uses: actions/setup-java@v3
        with:
          java-version: '17' # A versão do Java que instalamos localmente
          distribution: 'temurin'

      - name: 3. Construir (Build) o projeto TeaStore
        run: |
          # Navega para a pasta do TeaStore e executa o build do Maven
          cd TeaStore
          mvn clean install -DskipTests # Usamos -DskipTests para acelerar o build no pipeline

      - name: 4. Subir a aplicação TeaStore com Docker Compose
        run: |
          echo "Iniciando TeaStore..."
          # Agora usamos o caminho para o arquivo GERADO PELO BUILD
          docker compose -f ./TeaStore/utilities/tools.descartes.teastore.docker.all/target/docker-compose.yml up -d
          echo "Aguardando 45 segundos para os serviços estabilizarem..."
          sleep 45 # Aumentamos o tempo de espera, pois o build pode levar mais tempo

      - name: 5. Executar Teste de Carga com k6
        run: |
          echo "Rodando teste do k6..."
          docker run --rm -i --add-host=host.docker.internal:host-gateway \
            -v ${{ github.workspace }}/k6-teastore:/app \
            grafana/k6 run /app/teste-carga-simples.js

      - name: 6. Executar Teste de Carga com Locust
        run: |
          echo "Rodando teste do Locust..."
          docker run --rm --add-host=host.docker.internal:host-gateway \
            -v ${{ github.workspace }}/locust-teastore:/app \
            locustio/locust -f /app/locustfile.py \
            --host http://host.docker.internal:8080 --users 10 --spawn-rate 10 --headless --run-time 30s

      - name: 7. Executar Teste de Carga com JMeter
        run: |
          echo "Rodando teste do JMeter..."
          docker run --rm --add-host=host.docker.internal:host-gateway \
            -v ${{ github.workspace }}/jmeter-teastore:/app -w /app \
            justb4/jmeter -n -t teste-carga-simples.jmx -l results.jtl -e -o report

      - name: 8. Salvar o Relatório do JMeter como Artefato
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-report
          path: ./jmeter-teastore/report/